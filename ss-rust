#!/bin/bash
set -e

# 配置变量
CONFIG_DIR="/etc/shadowsocks-rust"
NODES_LIST="$CONFIG_DIR/nodes.list"
INSTALL_DIR="/usr/local/bin"
GITHUB_API="https://api.github.com/repos/shadowsocks/shadowsocks-rust/releases/latest"

# 检查 root 权限
[ "$EUID" -ne 0 ] && { echo "❌ 请以 root 用户运行"; exit 1; }

# 安装依赖
install_dependencies() {
    echo "🔧 检查依赖..."
    local MISSING=()
    declare -A pkg_commands=( ["curl"]="curl" ["jq"]="jq" ["xz-utils"]="xz" ["openssl"]="openssl" ["net-tools"]="ifconfig" )
    for pkg in "${!pkg_commands[@]}"; do
        command -v "${pkg_commands[$pkg]}" &>/dev/null || MISSING+=("$pkg")
    done
    if [ ${#MISSING[@]} -gt 0 ]; then
        echo "📥 安装缺失依赖：${MISSING[*]}"
        apt-get update -y && apt-get install -y --no-install-recommends "${MISSING[@]}" || { echo "错误：安装依赖失败"; exit 1; }
    else
        echo "ℹ️ 所有依赖已安装"
    fi
}

# 创建节点
create_node() {
    echo -e "\n📋 创建新节点"
    read -p "节点名称（留空自动生成）：" NODE_NAME
    [ -z "$NODE_NAME" ] && NODE_NAME="node$(date +%s | tail -c 3)" && echo "ℹ️ 节点名称：$NODE_NAME"

    CONFIG_FILE="$CONFIG_DIR/node-$NODE_NAME.json"
    SERVICE_NAME="shadowsocks-rust-$NODE_NAME"

    [ -f "$CONFIG_FILE" ] && { echo "⚠️ 节点 $NODE_NAME 已存在"; return 1; }
    mkdir -p "$CONFIG_DIR" && chmod 700 "$CONFIG_DIR"
    install_dependencies

    # 随机端口
    for i in {1..10}; do
        PORT=$((RANDOM % 10000 + 10000))
        ss -tuln | grep -q ":$PORT\b" || break
        [ $i -eq 10 ] && { echo "错误：无可用端口"; exit 1; }
    done

    PASSWORD=$(openssl rand -base64 12 | tr -d '/+=') 
    METHOD="aes-256-gcm"
    LISTEN_ADDR="0.0.0.0"

    # 下载 Shadowsocks-Rust
    if ! command -v ssserver &>/dev/null; then
        echo "📥 安装 Shadowsocks-Rust..."
        ARCH=$(uname -m)
        case "$ARCH" in
            x86_64) FILE="shadowsocks-v1.23.5.x86_64-unknown-linux-gnu.tar.xz" ;;
            aarch64) FILE="shadowsocks-v1.23.5.aarch64-unknown-linux-gnu.tar.xz" ;;
            *) echo "❌ 不支持架构 $ARCH"; exit 1 ;;
        esac

        TMPDIR=$(mktemp -d)
        trap 'rm -rf "$TMPDIR"' EXIT
        cd "$TMPDIR"

        echo "🔍 获取最新版本..."
        RELEASE=$(curl -sSL "$GITHUB_API" -H "Accept: application/vnd.github.v3+json" || { echo "错误：无法访问 GitHub API"; exit 1; })
        [ -z "$RELEASE" ] && { echo "错误：GitHub API 返回空数据"; exit 1; }

        VERSION=$(echo "$RELEASE" | jq -r '.tag_name')
        echo "ℹ️ 最新版本：$VERSION"
        FILE=$(echo "$FILE" | sed "s/v1.23.5/$VERSION/")

        echo "📋 可用资产："
        echo "$RELEASE" | jq -r '.assets[].name'

        URL=$(echo "$RELEASE" | jq -r ".assets[] | select(.name == \"$FILE\") | .browser_download_url")
        [ -z "$URL" ] && { echo "错误：未找到 $FILE"; echo "检查：https://github.com/shadowsocks/shadowsocks-rust/releases"; exit 1; }
        echo "ℹ️ 下载 URL：$URL"

        curl -L "$URL" -o ss.tar.xz || { echo "错误：下载 $URL 失败"; exit 1; }
        tar -xf ss.tar.xz || { echo "错误：解压失败"; exit 1; }
        install -m 755 ssserver sslocal ssmanager "$INSTALL_DIR/" || { echo "错误：安装失败"; exit 1; }
        cd ~ && rm -rf "$TMPDIR"
    fi

    # 写入配置文件
    cat > "$CONFIG_FILE" <<EOF
{
    "server": "$LISTEN_ADDR",
    "server_port": $PORT,
    "password": "$PASSWORD",
    "method": "$METHOD",
    "mode": "tcp_and_udp"
}
EOF
    chmod 600 "$CONFIG_FILE"
    chown root:root "$CONFIG_FILE"

    # 验证 JSON 格式
    echo "🔍 验证配置文件 $CONFIG_FILE..."
    jq . "$CONFIG_FILE" >/dev/null || { echo "错误：配置文件 JSON 格式无效"; cat "$CONFIG_FILE"; exit 1; }

    # 验证配置有效性
    echo "🔍 测试配置文件..."
    /usr/local/bin/ssserver -c "$CONFIG_FILE" >/dev/null 2>&1 & sleep 1; kill $! 2>/dev/null || { echo "错误：配置文件参数无效"; cat "$CONFIG_FILE"; exit 1; }

    # 创建 systemd 服务
    cat > "/etc/systemd/system/$SERVICE_NAME.service" <<EOF
[Unit]
Description=Shadowsocks-Rust Server ($NODE_NAME)
After=network.target

[Service]
Type=simple
ExecStart=$INSTALL_DIR/ssserver -c $CONFIG_FILE
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable --now "$SERVICE_NAME" || { echo "错误：启动服务失败"; journalctl -u "$SERVICE_NAME" -b; exit 1; }

    # 获取公网 IP
    if command -v curl &>/dev/null; then
    IP=$(curl -s https://api.ipify.org || curl -s https://ifconfig.me || echo "unknown")
elif command -v wget &>/dev/null; then
    IP=$(wget -qO- https://api.ipify.org || wget -qO- https://ifconfig.me || echo "unknown")
else
    IP="unknown"
fi
[ "$IP" = "unknown" ] && echo "⚠️ 无法获取公网 IP"


    # 生成 ss:// 链接
    ENCODED=$(echo -n "$METHOD:$PASSWORD@$IP:$PORT" | base64 -w 0)
    echo "$NODE_NAME $PORT $PASSWORD $METHOD" >> "$NODES_LIST"

    # ========== 输出节点信息 ==========
    SS_LINK="ss://${ENCODED}#${NODE_NAME}"
    echo -e "\n✅ 节点 $NODE_NAME 部署成功"
    echo "----------------------------------------"
    echo "$SS_LINK"
    echo "节点备注: $NODE_NAME"
    echo "  地址: $IP"
    echo "  端口: $PORT"
    echo "  加密方式: $METHOD"
    echo "  密码: $PASSWORD"
    echo "  ss://$(echo -n "$METHOD:$PASSWORD" | base64 -w 0)@$IP:$PORT#$NODE_NAME"
    echo "----------------------------------------"
}

# 删除节点
delete_node() {
    echo -e "\n🧹 删除节点"
    local NODES=()
    if [ -f "$NODES_LIST" ]; then
        mapfile -t NODES < <(cut -d ' ' -f1 "$NODES_LIST")
    else
        mapfile -t NODES < <(find "$CONFIG_DIR" -name 'node-*.json' -exec basename {} \; | sed 's/^node-//;s/\.json$//')
    fi

    [ ${#NODES[@]} -eq 0 ] && { echo "✅ 无节点可删除"; return; }
    echo "📋 当前节点："
    for i in "${!NODES[@]}"; do
        printf "  %2d) %s\n" $((i+1)) "${NODES[$i]}"
    done
    echo "   0) 返回"
    read -p "选择节点编号：" ID

    [ "$ID" = "0" ] && return
    [[ "$ID" =~ ^[0-9]+$ ]] && (( ID >= 1 && ID <= ${#NODES[@]} )) || { echo "❌ 无效编号"; return; }
    NODE="${NODES[$((ID-1))]}"
    echo "🧹 删除节点 $NODE..."
    systemctl stop "shadowsocks-rust-$NODE" 2>/dev/null || true
    systemctl disable "shadowsocks-rust-$NODE" 2>/dev/null || true
    rm -f "/etc/systemd/system/shadowsocks-rust-$NODE.service" "$CONFIG_DIR/node-$NODE.json"
    [ -f "$NODES_LIST" ] && sed -i "/^$NODE /d" "$NODES_LIST"
    systemctl daemon-reload
    echo "✅ 节点 $NODE 已删除"
}

# 开启 BBR
enable_bbr() {
    echo -e "\n🚀 开启 BBR 加速"

    # 检查内核版本
    KERNEL_VERSION=$(uname -r | cut -d'-' -f1)
    if [ "$(printf '%s\n' "$KERNEL_VERSION" "4.9" | sort -V | head -n1)" != "4.9" ]; then
        echo "❌ 当前内核版本过低 ($KERNEL_VERSION)，需要 >= 4.9"
        return 1
    fi

    # 检查 BBR 是否可用
    if ! sysctl net.ipv4.tcp_available_congestion_control 2>/dev/null | grep -q "bbr"; then
        echo "❌ BBR 不可用，请检查内核是否支持"
        return 1
    fi

    # 写入 sysctl 配置文件
    SYSCTL_FILE="/etc/sysctl.d/99-bbr.conf"
    if ! grep -q "net.ipv4.tcp_congestion_control=bbr" "$SYSCTL_FILE" 2>/dev/null; then
        cat > "$SYSCTL_FILE" <<EOF
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
EOF
    fi

    # 应用 sysctl 配置
    if ! sysctl --system >/dev/null 2>&1; then
        echo "❌ 应用 sysctl 配置失败"
        return 1
    fi

    # 尝试加载 tcp_bbr 模块
    if ! lsmod | grep -q tcp_bbr; then
        modprobe tcp_bbr 2>/dev/null || echo "⚠️ 无法加载 tcp_bbr 模块，可能需要重启"
    fi

    # 验证 BBR 是否启用
    if [ "$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)" = "bbr" ]; then
        echo "✅ BBR 已启用"
    else
        echo "❌ BBR 启用失败，请手动检查"
    fi
}

# 主菜单
while true; do
    echo -e "\n🧭 Shadowsocks-Rust 管理菜单"
    echo "1) 创建节点"
    echo "2) 删除节点"
    echo "3) 开启 BBR 加速"
    echo "0) 退出"
    read -p "操作编号：" CHOICE
    case "$CHOICE" in
        1) create_node ;;
        2) delete_node ;;
        3) enable_bbr ;;
        0) echo "👋 再见！"; exit 0 ;;
        *) echo "❌ 无效选项" ;;
    esac
done
